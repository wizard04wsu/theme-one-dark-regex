//regexp colors
@syntax-regexp-color-content: #7da672;
@syntax-regexp-color-delimiter: #00ff00;
@syntax-regexp-color-flag: #7afd7a;
@syntax-regexp-color-anchor: #ffffff;
@syntax-regexp-color-group-delimiter: saturate(#e8e888, 30%, relative);
@syntax-regexp-color-group-assertion: desaturate(darken(@syntax-regexp-color-group-delimiter, 35%, relative), 70%, relative);
@syntax-regexp-color-group-tag: saturate(lighten(@syntax-regexp-color-group-assertion, 25%, relative), 50%, relative);
@syntax-regexp-color-group-bg: fade(#668066, 7.1%);
	//@syntax-regexp-color-group-bg: transparent;
@syntax-regexp-color-backreference: #ffa15d;
@syntax-regexp-color-backreference-tag: desaturate(darken(@syntax-regexp-color-backreference, 25%, relative), 55%, relative);
@syntax-regexp-color-quantifier: #e2608b;
@syntax-regexp-color-quantifier-tag: desaturate(darken(@syntax-regexp-color-quantifier, 25%, relative), 40%, relative);
@syntax-regexp-color-character-special: @syntax-regexp-color-character-numeric;
@syntax-regexp-color-character-class: #bb8ad2;
@syntax-regexp-color-character-class-property: desaturate(darken(@syntax-regexp-color-character-class, 30%, relative), 40%, relative);
@syntax-regexp-color-character-numeric: #4696e2;
@syntax-regexp-color-character-numeric-charcode: desaturate(darken(@syntax-regexp-color-character-numeric, 25%, relative), 25%, relative);
@syntax-regexp-color-invalid: #ff0000;
@syntax-regexp-color-invalid-but-allowed: darken(@syntax-regexp-color-invalid, 5%);

//regexp colors inside a character set
@syntax-regexp-color-character-set: #56b6c2;
@syntax-regexp-color-character-set-delimiter: #88eeee;
@syntax-regexp-charset-color-character-special: mix(@syntax-regexp-color-character-numeric, @syntax-regexp-color-character-set, 60%);
@syntax-regexp-charset-color-character-class: mix(@syntax-regexp-color-character-class, @syntax-regexp-color-character-set, 60%);
@syntax-regexp-charset-color-character-class-property: mix(@syntax-regexp-color-character-class-property, @syntax-regexp-color-character-set, 75%);
//@syntax-regexp-charset-color-character-numeric: lighten(mix(@syntax-regexp-color-character-numeric, @syntax-regexp-color-character-set, 90%), 10%, relative);
//@syntax-regexp-charset-color-character-numeric-charcode: lighten(mix(@syntax-regexp-color-character-numeric-charcode, @syntax-regexp-color-character-set, 80%), 10%, relative);
@syntax-regexp-charset-color-character-numeric: @syntax-regexp-color-character-numeric;
@syntax-regexp-charset-color-character-numeric-charcode: @syntax-regexp-color-character-numeric-charcode;
@syntax-regexp-charset-color-range-dash: @syntax-regexp-color-character-set-delimiter;
@syntax-regexp-charset-color-range-bg: fade(#88eeee, 3.9%);
	//@syntax-regexp-charset-color-range-bg: transparent;


.syntax--source.syntax--js {
	.syntax--keyword.syntax--operator {
		color: @hue-1;

		// keywords are definded in https://github.com/atom/language-javascript/blob/master/grammars/javascript.cson
		// search "instanceof" for location
		&.syntax--delete,
		&.syntax--in,
		&.syntax--of,
		&.syntax--instanceof,
		&.syntax--new,
		&.syntax--typeof,
		&.syntax--void {
			color: @hue-3;
		}
	}
	
	//=== regular expressions ===
	
	.syntax--string.syntax--regexp {
		//the flags
		color: @syntax-regexp-color-flag;
		
		//the delimiters '/'
		& > .syntax--keyword.syntax--operator {
			color: @syntax-regexp-color-delimiter;
		}
		
		//the pattern
		.syntax--meta.syntax--pattern {
			
			//invalid content
			color: @syntax-regexp-color-invalid;
			
			//invalid content that doesn't throw an error
			.syntax--invalid {
				color: @syntax-regexp-color-invalid-but-allowed !important;
				
				&.syntax--escape > .syntax--keyword.syntax--operator.syntax--escape-character {
					opacity: 0.8 !important;
				}
			}
			
			//generic characters
			.syntax--constant.syntax--character {
				color: @syntax-regexp-color-content;
			}
			
			//disjuction delimiters '|'
			.syntax--keyword.syntax--operator.syntax--disjunction {
				color: @syntax-regexp-color-group-delimiter;
			}
			
			//boundary assertions
			.syntax--keyword.syntax--control.syntax--anchor {
				color: @syntax-regexp-color-anchor;
			}
			
			//character escapes
			.syntax--constant.syntax--character {
				
				//identity escape
				&.syntax--escape {
					color: @syntax-regexp-color-content;
					
					//the escape's backslash '\'
					.syntax--keyword.syntax--operator.syntax--escape-character {
						color: inherit;
						opacity: 0.4;
					}
				}
				
				//numeric and control escapes
				&.syntax--numeric,
				&.syntax--control {
					color: @syntax-regexp-color-character-numeric;
					
					//the escape's character code
					&.syntax--character-code {
						color: @syntax-regexp-color-character-numeric-charcode;
					}
				}
				
				//special escapes
				&.syntax--special {
					color: @syntax-regexp-color-character-special;
				}
			}
			
			//character classes
			.syntax--constant.syntax--other.syntax--character-class {
				color: 	@syntax-regexp-color-character-class;
				
				//unicode property classes
				.syntax--unicode-property {
					&.syntax--name,
					&.syntax--value {
						color: 	@syntax-regexp-color-character-class-property;
					}
					&.syntax--operator {
						color: inherit;
					}
				}
			}
			
			//character sets
			.syntax--constant.syntax--other.syntax--character-class.syntax--set {
				
				//invalid content
				color: @syntax-regexp-color-invalid;
				
				//delimiters and negation operator '[' ']' '^'
				.syntax--punctuation.syntax--definition,
				.syntax--keyword.syntax--operator.syntax--negation {
					color: @syntax-regexp-color-character-set-delimiter;
				}
				
				//inside the set -> generic characters
				.syntax--string.syntax--unquoted {
					color: @syntax-regexp-color-character-set;
				}
				
				//inside the set -> character escapes
				.syntax--constant.syntax--character {
					color: @syntax-regexp-color-character-set;
					
					//identity escape
					&.syntax-escape {
						color: inherit;
						
						//the escape's backslash '\'
						.syntax--keyword.syntax--operator.syntax--escape-character {
							color:inherit;
						}
					}
					
					//numeric and control escapes
					&.syntax--numeric,
					&.syntax--control {
						color: @syntax-regexp-charset-color-character-numeric;
						
						//the escape's character code
						&.syntax--character-code {
							color: @syntax-regexp-charset-color-character-numeric-charcode;
						}
					}
					
					//special escapes
					&.syntax--special {
						color: @syntax-regexp-charset-color-character-special;
					}
				}
				
				//inside the set -> character classes
				.syntax--constant.syntax--other.syntax--character-class {
					color: @syntax-regexp-color-character-set;
					
					&.syntax--escape,
					&.syntax--any {
						color: @syntax-regexp-charset-color-character-class;
						
						//unicode property classes
						.syntax--unicode-property {
							&.syntax--name,
							&.syntax--value {
								color: @syntax-regexp-charset-color-character-class-property;
							}
							&.syntax--operator {
								color: inherit;
							}
						}
					}
				}
				
				//inside the set -> character ranges
				.syntax--constant.syntax--other.syntax--character-class.syntax--range {
					background-color: @syntax-regexp-charset-color-range-bg;
					border-radius: 0.5em;
					padding: 0 0.1em 0.1em;
					margin: 0 -0.05em;
					
					//dash
					.syntax--punctuation.syntax--definition.syntax--range {
						color: @syntax-regexp-charset-color-range-dash;
					}
				}
			}
			
			//groups (including lookaround assertions)
			.syntax--meta.syntax--group {
				background-color: @syntax-regexp-color-group-bg;
				box-shadow: -1px 0 3px 0px @syntax-background-color,
										1px 0 3px 0px @syntax-background-color;
				border-radius: 0.7em;
				padding: 0.1em 0;
				
				//delimiters '(' and ')'
				& > .syntax--punctuation.syntax--definition.syntax--group {
					color: @syntax-regexp-color-group-delimiter;
				}
				
				//group type identifiers
				& > .syntax--entity.syntax--name.syntax--type {
					color: @syntax-regexp-color-group-assertion;
					
					//group names
					.syntax--entity.syntax--name.syntax--tag {
						color: @syntax-regexp-color-group-tag;
						font-style: italic;
					}
				}
			}
			
			//backreferences
			.syntax--keyword.syntax--other.syntax--back-reference {
				color: @syntax-regexp-color-backreference;
				
				//group names
				.syntax--entity.syntax--name.syntax--tag {
					color: @syntax-regexp-color-backreference-tag;
					font-style: italic;
				}
			}
			
			//quantifiers
			.syntax--keyword.syntax--operator.syntax--quantifier {
				color: @syntax-regexp-color-quantifier;
				
				//contents of count quantifiers
				.syntax--constant.syntax--numeric,
				.syntax--count.syntax--delimiter {
					color: @syntax-regexp-color-quantifier-tag;
				}
			}
		}
	}
}
